/*
 * MainModule v1.8.2
 * 
 * Main module for iPad Presentations
 * Supported platforms: Veeva iRep and Oracle iSales
 * 
 * Author: Juan Carlos Rojas <Costa Rica>
 * Email: juan.c.rojas.vargas@accenture.com
 * Creation date: April 27, 2013
 * Copyright (c) 2013 Accenture
 * 
 * Please, DO NOT edit this file. We need to keep the same structure
 * and global settings for all the slides. If you have questions or
 * recommendations, please, ask for the documentation or contact me.
 * 
 * By default the target platform is VEEVA. If you are going to work
 * with iSales, please, change the platform from the specific.js file
 * (do not modify main.js) using MainModule.setPlatform('ORACLE');
 * 
 * Last update: February 19, 2014 <juan.c.rojas.vargas>
 * 
 */

var MainModule = (function (window, undefined) {
    var debugOn = true, scrollableElementsList = [], targetPlatform = 'VEEVA',
        useTouchEvents = true;

    //show debugging messages
    var showDebugMessage = function (messageContent, messageType) {
        messageType || (messageType = 'log')

        if (debugOn) console[messageType](messageContent);
    };

    //default settings for avModal
    var avModalSettings = function () {
        if ($.fn.avModal) {
            $('.avModal').avModal({
                appendTo: '#contentWrapper',
                defaultWidth: '924',
                preventDefault: false,
                defaultHeight: '601',
                debug: debugOn,
                overlayOpacity: 1,
                theme: 'avModal'
            });
        } else {
            showDebugMessage('avModal plugin does not exist', 'warn');
        }
    };

    //detect mobile devices
    var isMobile = function () {
        return (/webOS|iPhone|iPad|iPod|Android|BlackBerry/i.test(navigator.userAgent));
    };

    //link between slides/pages
    var linksCustomTag = function () {
        var $links = $('[data-slide]');

        $links.unbind('click').unbind('touchstart');
        $links.bind('click' + (useTouchEvents === true ? ' touchend' : ''), function (e) {
            var $this = $(this);

            if (!$this.attr('data-surveyQuestion') && !$this.attr('data-tagDescription')) {
                e.preventDefault();

                var slideLink = $this.attr('data-slide');

                if (slideLink !== '') {
                    MainModule.openSlide(slideLink);
                } else {
                    showDebugMessage('The link is empty', 'warn');
                }
            }
        });
    };

    //lock overscroll
    var lockScroll = function () {
        $('body').on('touchmove', function (e) {
            e.preventDefault();

            var elementIndex = $.inArray('#' + e.target.id, scrollableElementsList);
            if (elementIndex === -1) {
                elementIndex = $.inArray('.' + e.target.className, scrollableElementsList);
            }

            if (elementIndex !== -1) {
                var $element = $(scrollableElementsList[elementIndex]);

                $element.on({
                    touchstart: function (e) {
                        showDebugMessage(e.target.id + ' is scrollable', 'log');
                        e.stopPropagation();
                    },
                    touchmove: function (e) {
                        e.stopPropagation();
                        $element.trigger('touchend');
                    },
                    touchend: function (e) {
                        $element.off('touchmove');
                        $element.off('touchend');
                    }
                });
            }
        });
    };

    //public methods
    return {
        //initialize script
        init: function (debugIsOn) {
            debugOn = (debugIsOn === true || false);
            showDebugMessage('Debug mode is ON', 'log');

            targetPlatform.toUpperCase();

            showDebugMessage('Initializing script', 'log');
            avModalSettings();
            linksCustomTag();
            lockScroll();

            return this;
        },
        //set scrollable elements
        setScrollableElements: function (elementsList) {
            elementsList || (elementsList = []);

            scrollableElementsList = elementsList;
            showDebugMessage('Setting up scrollable elements: ' +
                scrollableElementsList.join(', '), 'log');

            return this;
        },
        //debug-mode on
        setDebugOn: function () {
            debugOn = true;
            showDebugMessage('Debug mode is ON', 'log');

            return this;
        },
        //debug-mode off
        setDebugOff: function () {
            showDebugMessage('Debug mode is OFF', 'log');
            debugOn = false;

            return this;
        },
        //disable selection
        disableSelection: function (elementsList) {
            if (!elementsList || !elementsList.length) elementsList = ['body'];

            for (var element in elementsList) {
                $(elementsList[element]).
                    attr('unselectable', 'on')
                    .css('-webkit-user-select', 'none')
                    .on('selectstart', function (e) {
                        e.preventDefault();
                        showDebugMessage('Element is NOT selectable', 'log');
                        return false;
                    });
            }

            return this;
        },
        //allow selection
        enableSelection: function (elementsList) {
            if (!elementsList || !elementsList.length) elementsList = ['body'];

            for (var element in elementsList) {
                $(elementsList[element]).
                    removeAttr('unselectable')
                    .css('-webkit-user-select', 'auto')
                    .on('selectstart', function (e) {
                        e.stopPropagation();
                        showDebugMessage('Element is selectable', 'log');
                        return true;
                    });
            }

            return this;
        },
        //set target platform
        setPlatform: function (platformName) {
            targetPlatform = platformName.toUpperCase();
            showDebugMessage('Target platform is ' + targetPlatform, 'log');

            return this;
        },
        //get target platform
        getPlatform: function () {
            return targetPlatform;
        },
        //slide name
        getSlideName: function () {
            var currentPath = window.location.pathname;

            if (currentPath.indexOf('/') !== -1) {
                return currentPath.substr(currentPath.lastIndexOf('/') + 1).replace(/.html/ig, '');
            } else {
                return null;
            }
        },
        //next slide
        nextSlide: function () {
            if (this.getPlatform() == 'VEEVA') {
                document.location = 'veeva:nextSlide()';
            } else {
                showDebugMessage('nextSlide is available only for VEEVA', 'warn');
            }

            return this;
        },
        //open slide
        openSlide: function (slideLink) {
            if (slideLink && slideLink != '') {
                var fileExtension = (slideLink.lastIndexOf('.') !== -1) ?
                    slideLink.substring(slideLink.lastIndexOf('.')) : '', fileName = (fileExtension !== '') ?
                        slideLink.substring(0, slideLink.lastIndexOf('.')) : '', folderName = fileName;

                if (isMobile()) {
                    if (targetPlatform === 'VEEVA') {
                        document.location = 'veeva:gotoSlide(' + fileName + '.zip)';
                    } else if (targetPlatform === 'ORACLE') {
                        document.location = 'melt://navigatetoitem:' + fileName + '.html';
                    } else {
                        showDebugMessage('Unknown platform "' + targetPlatform + '"', 'warn');
                    }
                } else {
                    if (fileExtension.toUpperCase() === '.ZIP' || fileExtension.toUpperCase() === '.HTML') {
                        document.location = '../' + folderName + '/' + 'index.html';
                    } else {
                        document.location = '../' + folderName + '/' + fileName + fileExtension;
                    }
                }
            } else {
                showDebugMessage('Slide cannot be opened (no slide specified)', 'warn');
            }

            return this;
        },
        //tracking
        setTracking: function (elements, keyMessageName) {
            if (this.getPlatform() == 'VEEVA') {
                keyMessageName = keyMessageName || this.getSlideName();

                if (keyMessageName || elements) {
                    if (elements.length > 0) {
                        var element = 0;

                        for (element = 0; element < elements.length; element++) {
                            var elementClicked = $(elements[element].element);

                            elementClicked.attr({
                                'data-tagDescription': elements[element].tagDescription || 'UNDEFINED TAG DESCRIPTION',
                                'data-surveyQuestion': elements[element].surveyQuestion || 'UNDEFINED SURVEY QUESTION'
                            });
                            if (elementClicked.attr('data-slide')) {
                                var dataSlide = elementClicked.attr('data-slide');
                                elementClicked.removeAttr('data-slide').attr('data-open', dataSlide);
                            }

                            elementClicked.bind('click' + (useTouchEvents === true ? ' touchstart' : ''), function () {
                                var $this = $(this);

                                if ($this.attr('data-disableTracking') != 'true') {
                                    var tagDescription = $this.attr('data-tagDescription'),
                                        surveyQuestion = $this.attr('data-surveyQuestion') || tagDescription,
                                        trackingData = {
                                            Answer_vod__c: keyMessageName,
                                            Survey_Type_vod__c: tagDescription,
                                            Question_vod__c: surveyQuestion,
                                            Text_Entered_vod__c: tagDescription
                                        }, dataSlide = $this.attr('data-open') || '', callBack = '';

                                    if (dataSlide != '') callBack = 'MainModule.openSlide("' + dataSlide + '")';

                                    showDebugMessage('Tracking: [' + ($this.attr('data-surveyQuestion') ||
                                        'UNDEFINED SURVEY QUESTION') + '] ' + tagDescription +
                                        (dataSlide != '' ? ' / Open slide: ' + dataSlide : ''), 'log');

                                    if (isMobile()) {
                                        document.location = 'veeva:saveObject(Call_Clickstream_vod__c), value(' +
                                            JSON.stringify(trackingData).toString() + '), callback(' + String(callBack) + ')';
                                    } else {
                                        if (dataSlide != '') MainModule.openSlide(dataSlide);
                                    }
                                } else {
                                    showDebugMessage('Tracking is currently disabled for this element', 'warn');
                                }
                            });
                        }
                    } else {
                        showDebugMessage('Tracking will not work (no elements specified)', 'warn');
                    }
                } else {
                    showDebugMessage('Tracking will not work (check the parameters)', 'warn');
                }
            } else {
                showDebugMessage('Tracking is available only for VEEVA', 'warn');
            }

            return this;
        },
        //enable/disable support for touch events
        useTouchEvents: function (useOrNot) {
            useTouchEvents = (useOrNot === false ? false : true);
            linksCustomTag();

            return this;
        }
    }
})(window).init(true);